version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: dmoj_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_NAME:-dmoj}
      MYSQL_USER: ${DB_USER:-dmoj}
      MYSQL_PASSWORD: ${DB_PASSWORD:-dmoj123}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root123}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password --sql_mode="" --innodb-buffer-pool-size=128M --max-connections=50
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: dmoj_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru --save 60 1000
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 80M
        reservations:
          cpus: '0.05'
          memory: 32M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  web:
    build: .
    container_name: dmoj_web
    restart: unless-stopped
    environment:
      DEBUG: ${DEBUG:-False}
      SECRET_KEY: ${SECRET_KEY:-docker-dev-key}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,icodedn.com}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-https://icodedn.com,http://icodedn.com}
      DB_ENGINE: django.db.backends.mysql
      DB_NAME: ${DB_NAME:-dmoj}
      DB_USER: ${DB_USER:-dmoj}
      DB_PASSWORD: ${DB_PASSWORD:-dmoj123}
      DB_HOST: db
      DB_PORT: 3306
      REDIS_URL: redis://redis:6379/0
      SITE_NAME: ${SITE_NAME:-DMOJ}
      SITE_LONG_NAME: ${SITE_LONG_NAME:-DMOJ Modern Online Judge}
      SITE_ADMIN_EMAIL: ${SITE_ADMIN_EMAIL:-admin@example.com}
      SITE_FULL_URL: ${SITE_FULL_URL:-http://localhost:8000}
      DJANGO_SETTINGS_MODULE: dmoj.docker_settings
    volumes:
      - static_files:/app/static
      - media_files:/app/media
      - problem_data:/app/problems
      - ./logs:/app/logs
      - ./static:/app/static_mount
      - ./media:/app/media_mount
    ports:
      - "8000:8000"
      - "9999:9999"
      - "9998:9998"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"] 
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      bash -c "
        echo 'Waiting for database...' &&
        while ! mysqladmin ping -h db --silent; do
          echo 'Waiting for database...'
          sleep 2
        done &&
        echo 'Database is ready!' &&
        echo 'Running migrations...' &&
        python manage.py migrate --settings=dmoj.docker_settings &&
        echo 'Loading language fixtures...' &&
        python manage.py loaddata judge/fixtures/language_small.json --settings=dmoj.docker_settings &&
        echo 'Creating default admin user...' &&
        python manage.py shell --settings=dmoj.docker_settings -c \"from django.contrib.auth import get_user_model; from judge.models import Profile, Language; User = get_user_model(); admin_user = User.objects.create_superuser('admin', 'admin@localhost', '@654321') if not User.objects.filter(username='admin').exists() else User.objects.get(username='admin'); print('Admin user ready'); lang = Language.objects.first(); Profile(user=admin_user, language=lang).save() if lang and not hasattr(admin_user, 'profile') else None; print('Admin profile ready')\" &&
        echo 'Setting up Django Site...' &&
        python manage.py shell --settings=dmoj.docker_settings -c \"from django.contrib.sites.models import Site; Site.objects.update_or_create(id=1, defaults={'domain': 'icodedn.com', 'name': 'iCodeDN'})\" &&
        echo 'Activating all existing users...' &&
        python manage.py shell --settings=dmoj.docker_settings -c \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(is_active=False).update(is_active=True); print('All users activated')\" &&
        echo 'Building i18n files...' &&
        python manage.py compilejsi18n --settings=dmoj.docker_settings &&
        echo 'Collecting static files...' &&
        python manage.py collectstatic --noinput --settings=dmoj.docker_settings &&
        echo 'Copying static files for nginx...' &&
        mkdir -p /app/static_mount /app/media_mount &&
        cp -r /app/static/* /app/static_mount/ 2>/dev/null || true &&
        cp -r /app/media/* /app/media_mount/ 2>/dev/null || true &&
        echo 'Creating media directories...' &&
        mkdir -p /app/media/cache /app/media/problem_pdf /app/media/problem_data /app/media/profile_images &&
        chmod -R 777 /app/media &&
        echo 'Starting judge bridge...' &&
        python manage.py runbridged --settings=dmoj.docker_settings &
        echo 'Starting Gunicorn server...' &&
        gunicorn --bind 0.0.0.0:8000 --workers 2 --threads 2 --timeout 60 --max-requests 1000 --max-requests-jitter 100 dmoj.wsgi:application
      "

  celery:
    build: .
    container_name: dmoj_celery
    restart: unless-stopped
    command: celery -A dmoj worker -l info --concurrency=1 --max-tasks-per-child=1000
    environment:
      DEBUG: ${DEBUG:-False}
      SECRET_KEY: ${SECRET_KEY:-docker-dev-key}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,icodedn.com}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-https://icodedn.com,http://icodedn.com}
      DB_ENGINE: django.db.backends.mysql
      DB_NAME: ${DB_NAME:-dmoj}
      DB_USER: ${DB_USER:-dmoj}
      DB_PASSWORD: ${DB_PASSWORD:-dmoj123}
      DB_HOST: db
      DB_PORT: 3306
      REDIS_URL: redis://redis:6379/0
      DJANGO_SETTINGS_MODULE: dmoj.docker_settings
    volumes:
      - media_files:/app/media
      - problem_data:/app/problems
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 120M
        reservations:
          cpus: '0.05'
          memory: 64M
    healthcheck:
      test: ["CMD", "celery", "-A", "dmoj", "inspect", "ping", "-d", "celery@$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3

  judge:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dmoj_judge
    restart: unless-stopped
    command: >
      bash -c "
        echo 'Waiting for web service...' &&
        while ! nc -z web 9999; do
          echo 'Waiting for web service...'
          sleep 2
        done &&
        echo 'Web service is ready!' &&
        echo 'Creating judge...' &&
        python manage.py addjudge judge1 web 9999 --auth-key=key --settings=dmoj.docker_settings &&
        echo 'Starting judge...' &&
        python manage.py runbridged --judge --settings=dmoj.docker_settings
      "
    environment:
      DJANGO_SETTINGS_MODULE: dmoj.docker_settings
    volumes:
      - problem_data:/app/problems
    depends_on:
      web:
        condition: service_healthy

volumes:
  mysql_data:
  redis_data:
  static_files:
  media_files:
  problem_data: 